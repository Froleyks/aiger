	 The AIGER And-Inverter Graph (AIG) Format Version 20060908
	 ----------------------------------------------------------
	    Armin Biere, Johannes Kepler University, 2006

  This report describes the AIG file format as used by the AIGER library.
  The purpose of this report is not only to document the format, but also
  to precisely define the format to allow independent implementations of
  writers and readers.

Acknowledgements

  The format went through various incarnations even before real code became
  available.  In particular the following colleagues gave invaluable
  feedback on earlier drafts.

      Alessandro Cimatti, Koen Claessen, Niklas Een, Marc Herbstritt,
      Ken McMillan, Fabio Somenzi, Niklas Soerenson, Allen Van Gelder.

  We also want to thank Holger Hermmans who started the discussion on having
  a model checking competition affiliated to CAV and also provided strong
  support after the idea became more concrete.

Introduction

  The name AIGER contains as one part the acronym AIG of And-Inverter
  Graphs and also if pronounced in German sounds like the name of the
  'Eiger', a mountain in the Swiss alps.  This choice should emphasize the
  origin of this format. It was first openly discussed at the Alpine
  Verification Meeting 2006 in Ascona as a way to provide a simple, compact
  file format for a model checking competition affiliated to CAV 2007.

  The AIGER format has an ASCII and a binary version.  The ASCII version is
  the format of choice if an AIG is to be saved by an application which
  does not want to use the AIGER library.  It is simple to generate and has
  less restrictions.  The binary format is more restricted and much more
  compact.  It is easier to read and thus should be the format of choice for
  competitions.  The aiger library comes with conversion utilties of course.

  Let us start with some simple example in ASCII which all can be found in
  the 'examples' subdirectory.  The empty circuit without inputs nor outputs
  consists of the single line

    p aig 0 0 0 0 0		header
  
  The file that consists of the following two lines

    p aig 0 0 0 1 0		header
    0				output

  represents the constant FALSE.  Note that the comments to the right are
  not part of the file.  The following file represents the constant TRUE:
    
    p aig 0 0 0 1 0
    1

  The single '1' in the header specifies that the number of outputs is one.
  In this case the header is followed by a line which contains the literal
  of the single output.

  The following file is a buffer

    p aig 1 1 0 1 0		header
    2				input
    2				output

  and the following an inverter

    p aig 1 1 0 1 0		header
    2				input
    3				output		!1

  The maximal variable index is 1, the first number.  The second number
  represents the number of inputs.  The first line consists of the single
  input literal.  A variable is transformed into a literal by multiplying
  it by two.  In the first case the output specified on the last line leaves
  the input unchanged.  In the second case the ouput inverts the input.  The
  output literal '3' has its sign bit, the least significant bit, set to one
  accordingly.
  
  An AND gate looks as follows

    p aig 3 2 0 1 1
    2				1st input
    4				2nd input
    6				output
    6 2 4			AND gate	1 & 2

  The literal representing the AND gate is '6' with variable index '3',
  the first number in the header, which denotes the maximal variable index.
  The last number is the number of AND gates.

  An OR gate can be formulated as

    p aig 3 2 0 1 1
    2				1st input
    4				2nd input
    7				output		!(!1 & !2)
    6 3 5			AND gate	!1 & !2

  Let us now turn to a more complete combinational circuit

    p aig 7 2 0 2 3             header line
    2                           1st input	1st addend bit 'x'
    4                           2nd input	2nd addend bit 'y'
    6                           1st output	sum bit        's'
    12                          2nd output	carry          'c'
    6 13 15                     1st AND gate	x ^ y
    12 2 4                      2nd AND gate	x & y
    14 3 5                      3rd AND gate	!x & !y
    i0 2 x	                1st symbol
    i1 4 y			2nd symbol
    o0 6 s			3rd symbol
    o1 12 c			4th symbol
    c				comment header
    half adder			comment

  The symbol table is optional and does not need to be complete, but may
  only contain symbols for inputs, latches, or outputs.

  Sequential circuits have latches as state elements. Here is a toggle flip
  flop, wich has no input, one latch, and two outputs, its current state and
  its negation:

    p aig 1 0 1 2 0
    2 3				1st latch with next state literal
    2				1st output
    3				2nd output

  Latches are always assumed to be initialized to zero.  The same toggle
  flip flop with an enable and additional explicit active low reset input:

    p aig 7 2 1 2 4
    2				1st input	'enable'
    4				2nd input	'reset'
    6 8				1st latch	Q next(Q)
    6				1st output	Q
    7				2nd output	!Q
    8 4 10			1st AND gate	reset & (enable ^ Q)
    10 13 15			2nd AND gate	enable ^ Q
    12 2 6			3rd AND gate	enable & Q
    14 3 7			3rd AND gate	!enable & !Q

  The order of the literals and the definitions of the AND gates
  is irrelevant.  The binary format described more formally below places
  more restrictions on the order and also does not allow unused literals.

Design Choices
  
  The format should allow to model sequential circuits.

  The format should allow to model combinational circuits.
  
  Model checking problems can be described.

  Structural SAT problems can be described.

  The operators are restricted to bit level.

  The set of operators needs to be as simple as possible.

  A binary format should be available.

  The format should be as easy as possible to write by programs.

  The format should be as easy as possible to read by programs.

  Symbol tables and comments can be included.

  Symbol table can be ignored while reading the file sequentially.

  Comments can be ignored while reading the file sequentially.

  Some simple form of extensibility should be possible.

Common Terminology

  The AIGER format describes circuits by multi-rooted And-Inverter Graphs
  (AIGs).  The circuit has 'i' inputs, 'l' latches, 'o' outputs, and
  consists of 'a' AND gates.

  Variables respectively signals are represented by positive integers.  The
  maximal variable index 'm' is the first number in the header.  Literals
  are unsigned or signed variables or constants and are also represented as
  unsigned integers.  The least significant bit of a literal is the sign
  bit.  The remaining bit represent the variable index.

ASCII Format
  
  The ASCII format starts with a header line of the following form:
    
    p aig m i l o a

  followed by five unsigned integers in ASCII encoding.  The header line ends
  with a new line character.  The first character 'p' is the first character
  of the file.  The 'p', the format identifier string 'aig' and the numbers
  are seperated by exactly one space character ' '.  An unsigned integer is
  either '0' or a strictly positive ASCII encoded digit followed by sequence 
  of digits.

Binary Format
